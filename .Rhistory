# Define a function that takes the number of starting cells and returns division results
cell_division_summary <- function(initial_cells,
group_size = 10
) {
# total number of cells after 1 division
total_cells <- initial_cells * 2
# how many groups of cells are after 1 division
full_groups <- total_cells %/% group_size
# how many are leftover
leftover_cells <- total_cells %% group_size
# Return a list with results since we can only return one line as an result
list(
total_cells = total_cells,
full_groups = full_groups,
leftover_cells = leftover_cells
)
}
# Call the function with 48 cells
cell_division_summary(48)
switch(choice, "a" = 1, "b" = 2)
switch(2, "a" = 1, "b" = 2)
switch(5, "a" = 1, "b" = 2)
my_function <- function(x) {
# Show a message when the function starts
message("Starting calculation...")
# Stop the function if x is not numeric
if (!is.numeric(x)) {
stop("Input must be numeric.")
}
# Perform the calculation
res <- x * 2 - 4
# Warn the user if the result is negative
if (res < 0) {
warning("The result is negative.")
}
return(res)
}
my_function(5)
my_function(1)
my_function("a")
?unname
# Solve here
2+2
# Solve here
2+2
# Solve here
2+2
my_strings <- c(
"apple123", "banana", "cat!", "dog99", "zebra_2",
"Xray", "alpha-beta", "beta.alpha", "code42", "hello world!",
"abAB12", "123abc", "abc!", "end.", "Begin!", "test_case",
"no_numbers", "DATA2025", "regex_fun", "start_end"
)
grep("\\d", my_strings, value = TRUE)
grep("\\d", my_strings, value = FALSE)
grep("\\?", my_strings, value = TRUE)
my_strings <- c(
"apple123", "banana", "cat!", "dog99", "zebra_2",
"Xray", "alpha-beta", "beta.alpha", "code42", "hello world!",
"abAB12", "123abc", "abc!", "end.", "Begin!", "test_case?",
"no_numbers", "DATA2025", "regex_fun", "start_end"
)
grep("\\?", my_strings, value = TRUE)
grep("^[A-Z]", my_strings, value = TRUE)
grep("^[^A-Z]", my_strings, value = TRUE)
grep("^[A-Z]", my_strings, value = TRUE)
grep("^[A-Z]", my_strings, value = TRUE, invert = TRUE)
?grep
library(ggpubr)
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
scale_fill_nejm() +  # NEJM palette
theme_bw()
library(ggpubr)
# Scatter plot with stat_cor (correlation)
ggscatter(iris, x = "Sepal.Length", y = "Petal.Length",
color = "Species", add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson") +
theme_pubr()
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_violin(trim = FALSE, alpha = 0.5) +     # Show full distribution
geom_boxplot(width = 0.2, color = "black", outlier.shape = NA) +  # Summary stats
theme_minimal() +
labs(title = "Distribution of Sepal Length by Species") +
theme(legend.position = "none")
ggplot(iris, aes(x = Species, y = Sepal.Length)) +
geom_violin(trim = FALSE, alpha = 0.5, aes( fill = Species)) +     # Show full distribution
geom_boxplot(width = 0.2, color = "black", outlier.shape = NA) +  # Summary stats
theme_minimal() +
labs(title = "Distribution of Sepal Length by Species") +
theme(legend.position = "none")
ggplot(iris, aes(x = Species, y = Sepal.Length)) +
geom_violin(trim = FALSE, alpha = 0.5, aes( fill = Species)) +   # Show full distribution
geom_boxplot(width = 0.2, color = "black", outlier.shape = NA) +  # Summary stats
theme_minimal() +
theme(legend.position = "none")
# Create two plots using the iris dataset
p1 <- ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Boxplot")
p2 <- ggplot(iris, aes(x = Sepal.Length, fill = Species)) +
geom_histogram(bins = 20, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = "Histogram")
# Combine side by side
cowplot::plot_grid(p1, p2, labels = c("A", "B"))
plot_grid(p1, p2, ncol = 1, rel_heights = c(1, 2))
cowplot::plot_grid(p1, p2, ncol = 1, rel_heights = c(1, 2))
