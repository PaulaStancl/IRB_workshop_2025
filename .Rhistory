times = 1)
trainData <- cancer_clean[trainIndex, ]
testData <- cancer_clean[-trainIndex, ]
# Print the number of rows in training and testing sets
print(nrow(trainData))
full_model <- glm(Stage ~ .,
data = trainData,
family = binomial)
# Perform forward selection & select variables
step_model_for <- stepAIC(full_model,
direction = "forward",
trace = FALSE)
selected_vars_for <- names(coef(step_model_for))[-1]
selected_vars_for
# Run Boruta
model_boruta <- Boruta(Stage ~ .,
data = trainData)
print(model_boruta)
# Remove non-numeric columns (e.g., outcome variable)
numeric_data <- cancer_clean[, .SD, .SDcols = is.numeric]
# Standardize
scaled_all <- scale(numeric_data)
# Perform k-means on all features
set.seed(123)
# Elbow method
fviz_nbclust(scaled_all,
kmeans,
method = "wss")
km_all <- kmeans(scaled_all, centers = 2)
# Combine K-means and original label
kmeans_df <- cbind(cancer_clean,
cluster = as.factor(km_all$cluster)
)
# How well did k-means clustering do in comparison with known groups?
table(kmeans_df$cluster, kmeans_df$Stage)
### pca
# Visualize PCA with cluster assignment
# Perform PCA on the scaled matrix
pca_all <- prcomp(scaled_all)
# Visualize individuals, colored by cluster
fviz_pca_ind(pca_all,
geom.ind = "point",
col.ind = as.factor(km_all$cluster),  # km_all is from kmeans()
palette = "jco",
addEllipses = TRUE,
legend.title = "Cluster")
ctrl <- trainControl(method = "cv",
number = 10)
model <- train(Stage ~ .,
data = trainData,
method = "rf",       # or "rf", or "treebag"
trControl = ctrl,
family = binomial)
### confusion matrix and error
table(predict(model, trainData), trainData$Stage) %>%
confusionMatrix()
library(pROC)
# Get predicted probabilities for the positive class (e.g. "Yes")
train_probs <- predict(model, newdata = trainData, type = "prob")[, "High"]
train_labels <- trainData$Stage
# Compute ROC
roc_train <- roc(train_labels, train_probs)
# Plot ROC
plot(roc_train, col = "blue", lwd = 2, main = "ROC Curve - Training")
text(0.6, 0.2, paste("AUC =", round(auc(roc_train), 3)), col = "black")
# Predicted probabilities and classes
table(predict(model, testData), testData$Stage) %>% confusionMatrix()
# Predict probabilities for test data
test_probs <- predict(model, newdata = testData, type = "prob")[, "High"]
test_labels <- testData$Stage
# Compute ROC
roc_test <- roc(test_labels, test_probs)
# Plot ROC
plot(roc_test, col = "darkgreen", lwd = 2, main = "ROC Curve - Test Set")
text(0.6, 0.2, paste("AUC =", round(auc(roc_test), 3)), col = "black")
microbime <- fread("Projects/project_obesity/gut_obesity_subset.csv")
microbiome
microbime
microbiome
(microbiome <- fread("gut_obesity_subset.csv"))
## plot
ggplot(microbiome, aes(x=disease)) +
geom_bar() +
theme_bw() +
stat_count(geom = "text",
colour = "black", size = 3.5,
aes(label = ..count..),position=position_stack(vjust=0.5)
)
## plot
ggplot(microbiome, aes(x=disease)) +
geom_bar() +
theme_bw() +
stat_count(geom = "text",
colour = "white", size = 3.5,
aes(label = ..count..),position=position_stack(vjust=0.5)
)
microbiome[disease = "n", disease := NA]
microbiome[disease == "n", disease := NA]
microbiome
#
ggqqplot(cancer, x = "BMI",
color = "disease",
facet.by = "disease") +
theme(legend.position = "right")
#
ggqqplot(microbiome, x = "BMI",
color = "disease",
facet.by = "disease") +
theme(legend.position = "right")
microbiome
#
ggqqplot(microbiome, x = "bmi",
color = "disease",
facet.by = "disease") +
theme(legend.position = "right")
##
ggplot(microbiome, aes(x=disease, y=BMI)) +
geom_violin() +
geom_boxplot() +
theme_bw() +
ggpubr::stat_compare_means(  )
##
ggplot(microbiome, aes(x=disease, y=bmi)) +
geom_violin() +
geom_boxplot() +
theme_bw() +
ggpubr::stat_compare_means(  )
ggplot(microbiome, aes(x=s__Barnesiella_intestinihominis, fill=disease)) +
geom_density(alpha=0.4) +
theme_bw()
microbime[, .SD,.SDcols=is.numeric]
microbime[, .SD,.SDcols=is.numeric]
cor_data <- microbime[, .SD,.SDcols=is.numeric]
cor_matrix <- cor(cor_data)
png("Corr_plot.png", width = 800, height = 800)
corrplot(cor_matrix, method = 'square', type = 'upper', diag = FALSE, tl.col = "black")
dev.off()
microbiome_clean <- microbiome
microbiome
microbiome
microbiome[!is.na(disease),-c("dataset_name", "bodysite", "sampleID")]
microbiome_clean <- microbiome[!is.na(disease),-c("dataset_name", "bodysite", "sampleID")]
# Splitting data into training and testing sets
trainIndex <- createDataPartition(microbiome_clean$microbiome_clean,
p = 0.7,
list = FALSE,
times = 1)
# Splitting data into training and testing sets
trainIndex <- createDataPartition(microbiome_clean$disease,
p = 0.7,
list = FALSE,
times = 1)
trainData <- cancer_clean[trainIndex, ]
testData <- cancer_clean[-trainIndex, ]
# Print the number of rows in training and testing sets
print(nrow(trainData))
# Splitting data into training and testing sets
trainIndex <- createDataPartition(microbiome_clean$disease,
p = 0.7,
list = FALSE,
times = 1)
trainData <- disease[trainIndex, ]
# Splitting data into training and testing sets
trainIndex <- createDataPartition(microbiome_clean$disease,
p = 0.7,
list = FALSE,
times = 1)
trainData <- microbiome_clean[trainIndex, ]
testData <- microbiome_clean[-trainIndex, ]
# Print the number of rows in training and testing sets
print(nrow(trainData))
full_model <- glm(disease ~ .,
data = trainData,
family = binomial)
trainData
microbiome_clean <- microbiome[!is.na(disease),-c("dataset_name", "bodysite", "sampleID")]
microbiome_clean[, disease := factor(disease)]
# Splitting data into training and testing sets
trainIndex <- createDataPartition(microbiome_clean$disease,
p = 0.7,
list = FALSE,
times = 1)
trainData <- microbiome_clean[trainIndex, ]
testData <- microbiome_clean[-trainIndex, ]
# Print the number of rows in training and testing sets
print(nrow(trainData))
full_model <- glm(disease ~ .,
data = trainData,
family = binomial)
# Perform forward selection & select variables
step_model_for <- stepAIC(full_model,
direction = "forward",
trace = FALSE)
selected_vars_for <- names(coef(step_model_for))[-1]
selected_vars_for
full_model
summary(full_model)
summary(full_model)
# Remove non-numeric columns (e.g., outcome variable)
numeric_data <- microbiome_clean[, .SD, .SDcols = is.numeric]
# Standardize
scaled_all <- scale(numeric_data)
# Perform k-means on all features
set.seed(123)
# Elbow method
fviz_nbclust(scaled_all,
kmeans,
method = "wss")
km_all <- kmeans(scaled_all, centers = 2)
# Combine K-means and original label
kmeans_df <- cbind(microbiome_clean,
cluster = as.factor(km_all$cluster)
)
# How well did k-means clustering do in comparison with known groups?
table(kmeans_df$cluster, kmeans_df$Stage)
# How well did k-means clustering do in comparison with known groups?
table(kmeans_df$cluster, kmeans_df$disease)
# Visualize PCA with cluster assignment
# Perform PCA on the scaled matrix
pca_all <- prcomp(scaled_all)
# Visualize individuals, colored by cluster
fviz_pca_ind(pca_all,
geom.ind = "point",
col.ind = as.factor(km_all$cluster),  # km_all is from kmeans()
palette = "jco",
addEllipses = TRUE,
legend.title = "Cluster")
fviz_pca_ind(pca_all,
geom.ind = "point",
col.ind = as.factor(kmeans_df$disease),  # km_all is from kmeans()
palette = "jco",
addEllipses = TRUE,
legend.title = "Cluster")
ctrl <- trainControl(method = "cv",
number = 10)
trainData
model <- train(disease ~ .,
data = trainData,
method = "rf",       # or "rf", or "treebag"
trControl = ctrl,
family = binomial)
### confusion matrix and error
table(predict(model, trainData), trainData$Stage) %>%
confusionMatrix()
### confusion matrix and error
table(predict(model, trainData), trainData$disease) %>%
confusionMatrix()
predict(model, trainData)
library(pROC)
# Get predicted probabilities for the positive class (e.g. "Yes")
train_probs <- predict(model, newdata = trainData, type = "prob")[, "High"]
predict(model, newdata = trainData, type = "prob")
predict(model, newdata = trainData, type = "prob") %>%  head()
library(pROC)
# Get predicted probabilities for the positive class (e.g. "Yes")
train_probs <- predict(model, newdata = trainData, type = "prob")[, "leaness"]
train_labels <- trainData$disease
# Compute ROC
roc_train <- roc(train_labels, train_probs)
# Plot ROC
plot(roc_train, col = "blue", lwd = 2, main = "ROC Curve - Training")
text(0.6, 0.2, paste("AUC =", round(auc(roc_train), 3)), col = "black")
library(pROC)
# Get predicted probabilities for the positive class (e.g. "Yes")
train_probs <- predict(model, newdata = trainData, type = "prob")[, "obesity"]
train_labels <- trainData$disease
# Compute ROC
roc_train <- roc(train_labels, train_probs)
# Plot ROC
plot(roc_train, col = "blue", lwd = 2, main = "ROC Curve - Training")
text(0.6, 0.2, paste("AUC =", round(auc(roc_train), 3)), col = "black")
# Predicted probabilities and classes
table(predict(model, testData), testData$Stage) %>% confusionMatrix()
# Predicted probabilities and classes
table(predict(model, testData), testData$disease) %>% confusionMatrix()
varImp(model)
microbiome_clean <- microbiome[!is.na(disease),-c("dataset_name", "bodysite", "sampleID", "bmi")]
microbiome_clean[, disease := factor(disease)]
# Splitting data into training and testing sets
trainIndex <- createDataPartition(microbiome_clean$disease,
p = 0.7,
list = FALSE,
times = 1)
trainData <- microbiome_clean[trainIndex, ]
testData <- microbiome_clean[-trainIndex, ]
# Print the number of rows in training and testing sets
print(nrow(trainData))
full_model <- glm(disease ~ .,
data = trainData,
family = binomial)
summary(full_model)
# Perform forward selection & select variables
step_model_for <- stepAIC(full_model,
direction = "forward",
trace = FALSE)
selected_vars_for <- names(coef(step_model_for))[-1]
selected_vars_for
selected_vars_for
# Remove non-numeric columns (e.g., outcome variable)
numeric_data <- microbiome_clean[, .SD, .SDcols = is.numeric]
# Standardize
scaled_all <- scale(numeric_data)
# Perform k-means on all features
set.seed(123)
# Elbow method
fviz_nbclust(scaled_all,
kmeans,
method = "wss")
km_all <- kmeans(scaled_all, centers = 2)
# Combine K-means and original label
kmeans_df <- cbind(microbiome_clean,
cluster = as.factor(km_all$cluster)
)
# How well did k-means clustering do in comparison with known groups?
table(kmeans_df$cluster, kmeans_df$disease)
# Visualize PCA with cluster assignment
# Perform PCA on the scaled matrix
pca_all <- prcomp(scaled_all)
###
fviz_pca_ind(pca_all,
geom.ind = "point",
col.ind = as.factor(kmeans_df$disease),  # km_all is from kmeans()
palette = "jco",
addEllipses = TRUE,
legend.title = "Cluster")
# Visualize individuals, colored by cluster
fviz_pca_ind(pca_all,
geom.ind = "point",
col.ind = as.factor(km_all$cluster),  # km_all is from kmeans()
palette = "jco",
addEllipses = TRUE,
legend.title = "Cluster")
pca_all
# Combine PCA and original label
pca_df <- data.frame(pca_all$x,
disease = microbiome_clean$disease,
kmeans_res = as.factor(km_all$cluster))
# Plot PC1 vs PC2 and color by diagnosis
ggplot(pca_df, aes(PC1, PC2, col = disease, shape=kmeans_res)) +
geom_point(size = 2, alpha = 0.7) +
theme_minimal() +
labs(title = "", color = "Disease")
# Visualize individuals, colored by cluster
fviz_pca_ind(pca_all,
geom.ind = "point",
col.ind = as.factor(km_all$cluster),  # km_all is from kmeans()
palette = "jco",
addEllipses = TRUE,
legend.title = "Cluster")
# Plot PC1 vs PC2 and color by diagnosis
ggplot(pca_df, aes(PC1, PC2, col = disease, shape=kmeans_res)) +
geom_point(size = 2, alpha = 0.7) +
theme_minimal() +
labs(title = "", color = "Disease")
?fviz_pca_ind
ctrl <- trainControl(method = "cv",
number = 10)
model <- train(disease ~ .,
data = trainData,
method = "rf",       # or "rf", or "treebag"
trControl = ctrl,
family = binomial)
varImp(model)
### confusion matrix and error
table(predict(model, trainData), trainData$disease) %>%
confusionMatrix()
library(pROC)
# Get predicted probabilities for the positive class (e.g. "Yes")
train_probs <- predict(model, newdata = trainData, type = "prob")[, "leaness"]
train_labels <- trainData$disease
# Compute ROC
roc_train <- roc(train_labels, train_probs)
# Plot ROC
plot(roc_train, col = "blue", lwd = 2, main = "ROC Curve - Training")
text(0.6, 0.2, paste("AUC =", round(auc(roc_train), 3)), col = "black")
# Predicted probabilities and classes
table(predict(model, testData), testData$disease) %>% confusionMatrix()
# Predict probabilities for test data
test_probs <- predict(model, newdata = testData, type = "prob")[, "leaness"]
test_labels <- testData$disease
# Compute ROC
roc_test <- roc(test_labels, test_probs)
# Plot ROC
plot(roc_test, col = "darkgreen", lwd = 2, main = "ROC Curve - Test Set")
text(0.6, 0.2, paste("AUC =", round(auc(roc_test), 3)), col = "black")
# Predict probabilities for test data
test_probs <- predict(model, newdata = testData, type = "prob")[, "obesity"]
test_labels <- testData$disease
# Compute ROC
roc_test <- roc(test_labels, test_probs)
# Plot ROC
plot(roc_test, col = "darkgreen", lwd = 2, main = "ROC Curve - Test Set")
text(0.6, 0.2, paste("AUC =", round(auc(roc_test), 3)), col = "black")
model <- train(disease ~ .,
data = trainData,
method = "glm",       # or "rf", or "treebag"
trControl = ctrl,
family = binomial)
varImp(model)
### confusion matrix and error
table(predict(model, trainData), trainData$disease) %>%
confusionMatrix()
# table
cancer[,.N, cancer]
## plot
ggplot(cancer, aes(x=Gender, fill=Gender)) +
geom_bar() +
theme_bw() +
stat_count(geom = "text",
colour = "white", size = 3.5,
aes(label = ..count..),position=position_stack(vjust=0.5)
)
table_sex_smoking <- table(cancer[, Smoking_History],
cancer[, Gender])
##
table_sex_smoking
## test
chisq.test(table_sex_smoking)
## plot
ggplot(cancer, aes(x=Gender, fill=Smoking_History)) +
geom_bar(position="fill") +
theme_bw()
## evaluate normality
ggqqplot(cancer, x = "White_Blood_Cell_Count",
color = "Smoking_History",
facet.by = "Smoking_History") +
theme(legend.position = "right")
## plot
ggplot(cancer, aes(x=Smoking_History,
y=White_Blood_Cell_Count)) +
geom_violin() +
geom_boxplot() +
theme_bw() +
ggpubr::stat_compare_means(  )
ggplot(cancer, aes(x=Tumor_Size_mm, fill=Stage)) +
geom_density(alpha=0.4) +
theme_bw()
cor_data <- cancer[, .SD,.SDcols=is.numeric]
cor_matrix <- cor(cor_data)
png("Corr_plot.png", width = 800, height = 800)
corrplot(cor_matrix, method = 'square', type = 'upper', diag = FALSE, tl.col = "black")
dev.off()
set.seed(12)
cancer_clean <- cancer[,-c("Patient_ID")][Stage%in%c("Stage I", "Stage IV")]
#
cancer_clean[, Stage := ifelse(Stage == "Stage I", "Low", "High")]
cancer_clean[, Stage := factor(Stage)]
# Splitting data into training and testing sets
trainIndex <- createDataPartition(cancer_clean$Stage,
p = 0.7,
list = FALSE,
times = 1)
trainData <- cancer_clean[trainIndex, ]
testData <- cancer_clean[-trainIndex, ]
# Print the number of rows in training and testing sets
print(nrow(trainData))
full_model <- glm(Stage ~ .,
data = trainData,
family = binomial)
# Perform forward selection & select variables
step_model_for <- stepAIC(full_model,
direction = "forward",
trace = FALSE)
selected_vars_for <- names(coef(step_model_for))[-1]
selected_vars_for
# Run Boruta
model_boruta <- Boruta(Stage ~ .,
data = trainData)
print(model_boruta)
# Remove non-numeric columns (e.g., outcome variable)
numeric_data <- cancer_clean[, .SD, .SDcols = is.numeric]
# Standardize
scaled_all <- scale(numeric_data)
# Perform k-means on all features
set.seed(123)
# Elbow method
fviz_nbclust(scaled_all,
kmeans,
method = "wss")
km_all <- kmeans(scaled_all, centers = 2)
# Combine K-means and original label
kmeans_df <- cbind(cancer_clean,
cluster = as.factor(km_all$cluster)
)
# How well did k-means clustering do in comparison with known groups?
table(kmeans_df$cluster, kmeans_df$Stage)
### pca
# Visualize PCA with cluster assignment
# Perform PCA on the scaled matrix
pca_all <- prcomp(scaled_all)
# Visualize individuals, colored by cluster
fviz_pca_ind(pca_all,
geom.ind = "point",
col.ind = as.factor(km_all$cluster),  # km_all is from kmeans()
palette = "jco",
addEllipses = TRUE,
legend.title = "Cluster")
# Combine PCA and original label
pca_df <- data.frame(pca_all$x,
Stage = km_all$Stage,
kmeans_res = as.factor(km_all$cluster))
km_all$Stage
km_all
# Combine PCA and original label
pca_df <- data.frame(pca_all$x,
Stage = cancer_clean$Stage,
kmeans_res = as.factor(km_all$cluster))
# Plot PC1 vs PC2 and color by diagnosis
ggplot(pca_df, aes(PC1, PC2, col = Stage, shape=kmeans_res)) +
geom_point(size = 2, alpha = 0.7) +
theme_minimal() +
labs(title = "", color = "Stage")
