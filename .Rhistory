theme(legend.position = "none")
# Create two plots using the iris dataset
p1 <- ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Boxplot")
p2 <- ggplot(iris, aes(x = Sepal.Length, fill = Species)) +
geom_histogram(bins = 20, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = "Histogram")
# Combine side by side
cowplot::plot_grid(p1, p2, labels = c("A", "B"))
plot_grid(p1, p2, ncol = 1, rel_heights = c(1, 2))
cowplot::plot_grid(p1, p2, ncol = 1, rel_heights = c(1, 2))
cell_division_summary <- function(initial_cells, group_size = 10) {
# Calculate total number of cells after 1 division
total_cells <- initial_cells * 2
# Add growth classification based on total_cells
if (total_cells > 2000) {
growth_classification <- "Extreme growth"
} else if (total_cells > 1000) {
growth_classification <- "Rapid growth"
} else if (total_cells > 500) {
growth_classification <- "Moderate growth"
} else {
growth_classification <- "Slow growth"
}
# Calculate number of full groups
full_groups <- total_cells %/% group_size
# Calculate number of leftover cells
leftover_cells <- total_cells %% group_size
# Return all values in a list
list(
total_cells = total_cells,
full_groups = full_groups,
leftover_cells = leftover_cells,
growth_classification = growth_classification
)
}
# Example usage
cell_division_summary(600)  # Should classify as "Rapid growth"
cell_division_summary(1000) # Should classify as "Extreme growth"
cell_division_summary(250)  # Should classify as "Moderate growth"
cell_division_summary(100)  # Should classify as "Slow growth"
cell_division_summary(250)  # Should classify as "Moderate growth"
cell_division_summary(550)  # Should classify as "Moderate growth"
# Example usage
cell_division_summary(600)  #  "Rapid growth"
cell_division_summary(1000) #  "Extreme growth"
cell_division_summary(1001) #  "Extreme growth"
cell_division_summary(251)
cell_division_summary(100)  #  "Slow growth"
dt <- fread("https://vincentarelbundock.github.io/Rdatasets/csv/OncoDataSets/cancer_in_dogs_tbl_df.csv")
library(data.table)
dt <- fread("https://vincentarelbundock.github.io/Rdatasets/csv/OncoDataSets/cancer_in_dogs_tbl_df.csv")
dt
fread("https://vincentarelbundock.github.io/Rdatasets/csv/MedDataSets/covid19sf_tests_df.csv")
fread("https://vincentarelbundock.github.io/Rdatasets/csv/medicaldata/covid_testing.csv")
fread("https://lter.limnology.wisc.edu/sites/default/files/Gaeta_etal_CLC_data.csv")
fread("https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/HairEyeColor.html")
PlantGrowth
fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv") %>% .[1:3,1:3]
library(magrittr)
fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv") %>% .[1:3,1:3]
fread("https://storage.googleapis.com/covid19-open-data/v3/epidemiology.csv") %>% .[1:3,1:3]
fread("https://storage.googleapis.com/covid19-open-data/v3/epidemiology.csv") -> bla
bla
fread("https://covid.ourworldindata.org/data/owid-covid-data.csv")
dt_covid
dt_covid <- fread("https://covid.ourworldindata.org/data/owid-covid-data.csv")
dt_covid <- fread("https://covid.ourworldindata.org/data/owid-covid-data.csv")
dt_covid
dt_covid
``
dt_covid
dt_covid <- fread("https://vincentarelbundock.github.io/Rdatasets/csv/AER/CigarettesSW.csv")
dt_covid
dt_covid <- fread("https://vincentarelbundock.github.io/Rdatasets/csv/aod/lizards.csv")
dt_covid
dt_covid <- fread("https://vincentarelbundock.github.io/Rdatasets/csv/bayesrules/penguins_bayes.csv")
dt_covid
dt_covid <- fread("https://vincentarelbundock.github.io/Rdatasets/csv/boot/melanoma.csv")
dt_covid
dt_covid <- fread("https://vincentarelbundock.github.io/Rdatasets/csv/CardioDataSets/heartdisease_tbl_df.csv")
dt_covid
dt_covid
dt_covid[,max(MaximumHR), Sex]
fread("https://vincentarelbundock.github.io/Rdatasets/csv/CardioDataSets/heartdisease_tbl_df.csv")
(cancer <- fread("Cancer_Data.csv"))
setwd("C:/Users/Paula/OneDrive/Work/KC_work/IRB_radionica_25/Projects/project_cancer")
(cancer <- fread("Cancer_Data.csv"))
library(data.table)
(cancer <- fread("Cancer_Data.csv"))
str(cancer)
str(cancer)
(cancer <- fread("lung_cancer_data.csv"))
str(cancer)
cancer
cancer
cancer
dim(cancer)
setwd("C:/Users/Paula/OneDrive/Work/KC_work/IRB_radionica_25/Projects/project_obesity")
iris
iris[, lapply(.SD, function(x) list(mean(x), sum(x))),
.SDcols=is.numeric]
setDT(iris)
iris_dt <- as.data.table(iris)
iris_dt[, lapply(.SD, function(x) list(mean(x), sum(x))),
.SDcols=is.numeric]
iris_dt[, lapply(.SD, function(x) list(mean(x), sum(x)) %>%
unlist()
),
.SDcols=is.numeric]
library(magrittr)
iris_dt[, lapply(.SD, function(x) list(mean(x), sum(x)) %>%
unlist()
),
.SDcols=is.numeric]
iris_dt[, lapply(.SD, function(x) list(mean(x), sum(x)) %>%
unlist()
),
.SDcols=is.numeric] %>%
cbind(data.table(metric = c("mean", "sum")), . )
melt(iris_dt, id.vars="Species")
iris_dt[, lapply(.SD, function(x) list(mean(x), sum(x)) %>%
unlist()
),
.SDcols=is.numeric] %>%
# now adding metic colum
cbind(data.table(metric = c("mean", "sum")), . )
iris_dt[, lapply(.SD, function(x) list(mean(x), sum(x)) %>%
unlist()
),
.SDcols=is.numeric, by=Species]
iris_dt[, lapply(.SD, function(x) list(mean(x), sum(x)) %>%
unlist()
),
.SDcols=is.numeric, by=Species] %>%
# now adding metic colum
cbind(data.table(metric = rep(c("mean", "sum"), 2)), . )
setwd("C:/Users/Paula/OneDrive/Work/KC_work/IRB_radionica_25/Projects/project_cancer")
nrow(cancer)
cancer
str(cancer)
cancer[sample(1:nrow(cance)), by=.(Gender, Smoking_History, Stage)]
cancer[sample(1:nrow(cancer)), by=.(Gender, Smoking_History, Stage)]
cancer[sample(1:nrow(cancer), n=300),
by=.(Gender, Smoking_History, Stage)]
cancer[sample(1:nrow(cancer), size=300),
by=.(Gender, Smoking_History, Stage)]
cancer[sample(1:nrow(cancer), size=300),
by=.(Gender, Smoking_History, Stage)][,.N,Gender]
cancer[sample(1:nrow(cancer), size=300),
by=.(Gender, Smoking_History, Stage)][,.N,.(Gender, Smoking_History, Stage)]
cancer[sample(1:nrow(cancer), size=300),
by=.(Gender, Smoking_History, Stage)][,.N,.(Stage)]
cancer[sample(1:nrow(cancer), size=300),
by=.(Gender, Smoking_History, Stage)]
cancer[sample(1:nrow(cancer), size=300),
by=.(Gender, Smoking_History, Stage)][,.(Patient_ID, Age, Gender, Smoking_History, Tumor_Site_mm, Tumor_Location, Stage, Comorbidity_Diabetes, Comorbidity_Autoimmune_Disease, Comorbidity_Heart_Disease, Comorbidity_Chronic_Lung_Disease, White_Blood_Cell_Count, Hemoglobin_Level, Albumin_Level,Alkaline_Phosphatase_Level,Alanine_Aminotransferase_Level, Aspartate_Aminotransferase_Level, Creatinine_Level, LDH_Level, Glucose_Level, Smoking_Pack_Years)]
cancer[sample(1:nrow(cancer), size=300),
by=.(Gender, Smoking_History, Stage)]
cancer[sample(1:nrow(cancer), size=300),
by=.(Gender, Smoking_History, Stage)][,.(Patient_ID, Age, Gender, Smoking_History, Tumor_Size_mm, Tumor_Location, Stage, Comorbidity_Diabetes, Comorbidity_Autoimmune_Disease, Comorbidity_Heart_Disease, Comorbidity_Chronic_Lung_Disease, White_Blood_Cell_Count, Hemoglobin_Level, Albumin_Level,Alkaline_Phosphatase_Level,Alanine_Aminotransferase_Level, Aspartate_Aminotransferase_Level, Creatinine_Level, LDH_Level, Glucose_Level, Smoking_Pack_Years)]
cancer[sample(1:nrow(cancer), size=300),
by=.(Gender, Smoking_History, Stage)]
fwrite(subset_data, "lung_cancer_subset_data.csv")
subset_data <- cancer[sample(1:nrow(cancer), size=300),
by=.(Gender, Smoking_History, Stage)][,.(Patient_ID, Age, Gender, Smoking_History, Tumor_Size_mm, Tumor_Location, Stage, Comorbidity_Diabetes, Comorbidity_Autoimmune_Disease, Comorbidity_Heart_Disease, Comorbidity_Chronic_Lung_Disease, White_Blood_Cell_Count, Hemoglobin_Level, Albumin_Level,Alkaline_Phosphatase_Level,Alanine_Aminotransferase_Level, Aspartate_Aminotransferase_Level, Creatinine_Level, LDH_Level, Glucose_Level, Smoking_Pack_Years)]
fwrite(subset_data, "lung_cancer_subset_data.csv")
(cancer <- data.table::fread("lung_cancer_subset_data.csv"))
str(cancer)
dim(cancer)
cancer
cancer
setwd("C:/Users/Paula/OneDrive/Work/KC_work/IRB_radionica_25/Projects/project_obesity")
(microbiome <- fread("abundance_stoolsubset.csv"))
names(microbiome)[1:250]
grep("g__", names(microbiome), value=TRUE) %>% length
vec_colnames <- grep("g__", names(microbiome), value=TRUE) %>%
#sample(., size = 40) %>%
c("dataset_name", "sampleID", "bodysite",  "disease",
"bmi",
.)
###
obesity_microbiome <- microbiome[dataset_name == "Chatelier_gut_obesity", ..vec_colnames]
obesity_microbiome
grep("s__", names(microbiome), value=TRUE) %>% length
vec_colnames <- grep("s__", names(microbiome), value=TRUE) %>%
#sample(., size = 40) %>%
c("dataset_name", "sampleID", "bodysite",  "disease",
"bmi",
.)
library(stringr)
## maybe select only species
grep("s__", names(microbiome), value=TRUE) %>%
str_extract(., "s__.*") %>%
head()
## maybe select only species
grep("s__", names(microbiome), value=TRUE) %>%
str_extract(., "s__.*") %>%
length
## maybe select only species
grep("s__", names(microbiome), value=TRUE) %>%
str_extract(., "s__.*") %>%
uniqueN()
vec_colnames <- grep("s__", names(microbiome), value=TRUE) %>%
str_extract(., "s__.*") %>%
#sample(., size = 40) %>%
c("dataset_name", "sampleID", "bodysite",  "disease",
"bmi",
.)
###
obesity_microbiome <- microbiome[dataset_name == "Chatelier_gut_obesity", ..vec_colnames]
vec_colnames <- grep("s__", names(microbiome), value=TRUE) %>%
#str_extract(., "s__.*") %>%
#sample(., size = 40) %>%
c("dataset_name", "sampleID", "bodysite",  "disease",
"bmi",
.)
set.seed(40)
vec_colnames <- grep("s__", names(microbiome), value=TRUE) %>%
#str_extract(., "s__.*") %>%
#sample(., size = 40) %>%
c("dataset_name", "sampleID", "bodysite",  "disease",
"bmi",
.)
###
obesity_microbiome <- microbiome[dataset_name == "Chatelier_gut_obesity", ..vec_colnames]
obesity_microbiome
obesity_microbiome <- microbiome[dataset_name == "Chatelier_gut_obesity", ..vec_colnames]
keep_vec <- obesity_microbiome[,lapply(.SD, function(x) sum(x)), .SDcols = is.numeric] %>%
melt() %>%
.[value>=500] %>%
.$variable %>%
as.character(.) %>%
c("dataset_name", "sampleID", "bodysite",  "disease",
"bmi",
.)
obesity_microbiome <- obesity_microbiome[, ..keep_vec]
dim(obesity_microbiome)
obesity_microbiome
dim(obesity_microbiome)
obesity_microbiome
setnames(obesity_microbiome,
grep("s__",names(obesity_microbiome)),
grep("s__", names(obesity_microbiome), value=TRUE) %>%
str_extract(., "s__.*")
)
obesity_microbiome
## maybe select only species
grep("s__", names(microbiome), value=TRUE) %>%
str_extract(., "s__.*") %>%
str_remove(., "\\|t_.*") %>% length()
## maybe select only species
grep("s__", names(microbiome), value=TRUE) %>%
str_extract(., "s__.*") %>%
str_remove(., "\\|t_.*") %>%
uniqueN()
###
vec_colnames <- grep("s__", names(microbiome), value=TRUE) %>%
#str_extract(., "s__.*") %>%
#sample(., size = 40) %>%
c("dataset_name", "sampleID", "bodysite",  "disease",
"bmi",
.)
###
obesity_microbiome <- microbiome[dataset_name == "Chatelier_gut_obesity", ..vec_colnames]
keep_vec <- obesity_microbiome[,lapply(.SD, function(x) sum(x)), .SDcols = is.numeric] %>%
melt() %>%
.[value>=500] %>%
.$variable %>%
as.character(.) %>%
c("dataset_name", "sampleID", "bodysite",  "disease",
"bmi",
.)
obesity_microbiome <- obesity_microbiome[, ..keep_vec]
dim(obesity_microbiome)
setnames(obesity_microbiome,
grep("s__",names(obesity_microbiome)),
grep("s__", names(obesity_microbiome), value=TRUE) %>%
str_extract(., "s__.*")
)
obesity_microbiome
dim(cancer)
obesity_microbiome
fwrite(obesity_microbiome, "gut_obesity_subset.csv")
(microbiome <- fread("gut_obesity_subset.csv"))
microbiome[,.N,disease]
# Data manipulation
library(data.table)
# Visualization
library(ggplot2)
library(ggpubr)
library(corrplot)
# Machine learning
library(caret)
library(MASS)
library(factoextra)
library(Boruta)
# Set seed for reproducibility
set.seed(12345)
heart_disease <- fread("https://vincentarelbundock.github.io/Rdatasets/csv/CardioDataSets/heartdisease_tbl_df.csv")
class(heart_disease)
str(heart_disease)
head(heart_disease)
summary(heart_disease)
table(heart_disease$HeartDisease)
heart_disease[, Sex := as.factor(Sex)]
heart_disease[, ChestPain := as.factor(ChestPain)]
heart_disease[, BloodSugar := as.factor(BloodSugar)]
heart_disease[, ExerciseInducedAngina := as.factor(ExerciseInducedAngina)]
heart_disease[, HeartDisease := as.factor(HeartDisease)]
str(heart_disease)
# Calculate Pearson's correlation coefficient
cor_matrix <- cor(heart_disease[, .SD, .SDcols = is.numeric][, -1],
method = "pearson",
use = "complete.obs")
# Plot corrplot to evaluate correlation patterns among the data
corrplot(cor_matrix,
method = "color",
type = "upper",
diag = FALSE,
order = "hclust",
tl.cex = 0.7,
tl.col = "black", addCoef.col = "black",
col = colorRampPalette(c("blue", "white", "red"))(200))
# Summary of the data
summary(heart_disease)
# Data scaling
heart_disease_scaled <- scale(heart_disease[, .SD, .SDcols = is.numeric][, -1])
# Summary of the normalized data
summary(heart_disease_scaled)
# Run PCA
pca_result <- prcomp(heart_disease_scaled, scale. = FALSE)
# Combine PCA and original label
pca_df <- data.frame(pca_result$x,
diagnosis = heart_disease$HeartDisease)
# Plot PC1 vs PC2 and color by diagnosis
ggplot(pca_df, aes(PC1, PC2, col = diagnosis)) +
geom_point(size = 2, alpha = 0.7) +
theme_minimal() +
labs(title = "", color = "Diagnosis")
# Explained variance
summary(pca_result)
km.out_initial <- kmeans(heart_disease_scaled,
centers = 2,
nstart = 20)
km.out_initial
# Evaluate size of each cluster
km.out_initial$size
# Elbow method
fviz_nbclust(heart_disease_scaled,
kmeans,
method = "wss")
# Combine K-means and original label
kmeans_df <- cbind(heart_disease,
cluster = as.factor(km.out_initial$cluster)
)
# How well did k-means clustering do in comparison with known groups?
table(kmeans_df$cluster, kmeans_df$HeartDisease)
# Visualize PCA with cluster assignment
fviz_pca_ind(prcomp(heart_disease_scaled),
geom.ind = "point",
col.ind = as.factor(kmeans_df$cluster),
palette = "jco",
addEllipses = TRUE,
legend.title = "Cluster")
# Calculate clusters based on default distance metrics - evaluate others!
hclust_result <- hclust(dist(heart_disease_scaled),
method = "complete")
# Create dendogram
plot(hclust_result)
# Full model
full_model <- glm(HeartDisease ~ .,
data = heart_disease,
family = binomial)
# Perform backward selection & select variables
step_model_back <- stepAIC(full_model,
direction = "backward",
trace = FALSE)
selected_vars_back <- names(coef(step_model_back))[-1]
selected_vars_back
# Perform forward selection & select variables
step_model_for <- stepAIC(full_model,
direction = "forward",
trace = FALSE)
selected_vars_for <- names(coef(step_model_for))[-1]
selected_vars_for
# Perform both selection & select variables
step_model_both <- stepAIC(full_model,
direction = "both",
trace = FALSE)
selected_vars_both <- names(coef(step_model_both))[-1]
selected_vars_both
# Run Boruta
model_boruta <- Boruta(HeartDisease ~ .,
data = heart_disease)
print(model_boruta)
plot(model_boruta)
# Select confirmed features
selected_var <- getSelectedAttributes(model_boruta)
# Resolve tentative features (if any)
final_boruta <- TentativeRoughFix(model_boruta)
getSelectedAttributes(final_boruta)
heart_disease <- as.data.frame(heart_disease[, -1])
# Splitting data into training and testing sets
trainIndex <- createDataPartition(heart_disease$HeartDisease,
p = 0.7,
list = FALSE,
times = 1)
trainData <- heart_disease[trainIndex, ]
testData <- heart_disease[-trainIndex, ]
# Print the number of rows in training and testing sets
print(nrow(trainData))
table(trainData$HeartDisease)
print(nrow(testData))
table(testData$HeartDisease)
# Feature scaling (excluding factor columns)
numericColumns <- sapply(trainData, is.numeric)
preProcValues <- preProcess(trainData[, numericColumns[-1]], method = c("center", "scale"))
trainData[, numericColumns] <- predict(preProcValues,
trainData[, numericColumns])
testData[, numericColumns] <- predict(preProcValues,
testData[, numericColumns])
glm_model <- train(HeartDisease ~ .,
data = trainData,
method = "glm",
family = "binomial")
glm_model
summary(glm_model)
# Making predictions
predictions <- predict(glm_model, testData)
# Evaluating the model
confusion <- confusionMatrix(predictions, testData$HeartDisease)
print(confusion)
# Visualizing the logistic regression coefficients
coef_df <- as.data.frame(coef(summary(glm_model$finalModel)))
coef_df$Variable <- rownames(coef_df)
names(coef_df)[1] <- "Estimate"
scatter_plot <- ggplot(coef_df, aes(x = reorder(Variable, Estimate), y = Estimate)) +
geom_bar(stat = 'identity') +
coord_flip() +
theme_light() +
labs(title = "Variable Importance (Logistic Regression)",
x = "Variables",
y = "Estimate")
# Basic parameter tuning
fitControl <- trainControl(
## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
# Create a model
glm_model_2 <- train(HeartDisease ~ .,
data = trainData,
method = "glm",
family = "binomial",
metric = "Accuracy",
trControl = fitControl)
glm_model_2
summary(glm_model_2)
# Making predictions
predictions_2 <- predict(glm_model_2, testData)
# Evaluating the model
confusion_2 <- confusionMatrix(predictions_2, testData$HeartDisease)
print(confusion_2)
# Create a model
glm_model_Boruta <- train(HeartDisease ~ .,
data = trainData[, c("HeartDisease", selected_var)],
method = "glm",
family = "binomial",
metric = "Accuracy",
trControl = fitControl)
glm_model_Boruta
summary(glm_model_Boruta)
# Making predictions
predictions_Boruta <- predict(glm_model_Boruta, testData)
# Evaluating the model
confusion_Boruta <- confusionMatrix(predictions_Boruta, testData$HeartDisease)
print(confusion_Boruta)
scatter_plot
# Basic parameter tuning
fitControl <- trainControl(
## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
# Create a model
glm_model_2 <- train(HeartDisease ~ .,
data = trainData,
method = "glm",
family = "binomial",
metric = "Accuracy",
trControl = fitControl)
glm_model_2
summary(glm_model_2)
library(data.table)
cancer <- fread("Projects/project_cancer/lung_cancer_subset_data.csv")
str(cancer)
dim(cancer)
(microbiome <- fread("gut_obesity_subset.csv"))
microbiome
str(microbiome )
dim(microbiome )
microbiome[,1:4]
microbiome[,.N,disease]
microbiome
cancer
