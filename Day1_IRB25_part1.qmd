---
title: "Introduction to R"
author: 
  - name: "dr.sc. Paula Štancl"
    affiliation: "Kuzman Consulting d.o.o"
  - name: "dr.sc. Andrea Gelemanović"
    affiliation: "MedILS, UNIST"
format:
  html:
    self-contained: true
    toc: true
    toc-depth: 5
    code-fold: false
    fig-align: center
    df-print: paged
    code-summary: "Show code"
    code-line-numbers: false
    code-tools: true
    
execute:
  echo: true
  message: false
  collapse: true
---

Hello everyone to your first session "Introduction to R" in the Institute Ruder Boskovic (IRB) workshop. During this session, you will learn the basics to R programming and working environment.

::: callout-tip
# How to quickly code a chunk

**Ctrl + Alt + I**
:::

# R as calculator

R can be used as a basic calculator to perform arithmetic operations like addition, subtraction, multiplication, and division.

| Expression        | Description                  | Result |
|-------------------|------------------------------|--------|
| `(9 + 2)*(3 - 1)` | Multiply sum and difference  | `22`   |
| `sqrt(2)^2`       | Square of square root of 2   | `2`    |
| `5 / 2`           | Division (gives decimal)     | `2.5`  |
| `5 %/% 2`         | Integer (floor) division     | `2`    |
| `5 %% 2`          | Remainder (modulo operation) | `1`    |

##### Task

A scientist has **48** stem cells. Each one divides into **2** daughter cells.

-   How many cells will there be after division?

-   How many full groups of **10 cells** can you make after first division? How many left over?

```{r}
# Solve here
48*2
(48*2) %/% 10
(48*2) %% 10
```

# R objects

## Variable

### Creating a variable

To create a certain object, you need to give it a name followed by the assignment operator **\<-** and the value you want to store it. To see the stored value in a variable, you can call it using *parentheses* or *by typing the object name*.

```{r}
vec <- 5
# Print
#vec
# Print
(vec2 <- 10)
```

### Naming a variable

When naming the variables, they mustn't be too short or too long. Avoid meaningless variable names and name them logically ( example: **`mRNA_human`** ) R is case sensitive ( example: **`vec`** is different to **`Vec`** ). Some names cannot be used because they are the names of fundamental functions in R (e.g., **`if`**, **`else`**, **`for`**...). In general, even if it's allowed, it's best to not use other function names (e.g., **`c`**, **`t`**, **`mean`**, **`data`**, **`df`**). Furthermore, avoid using dots (**`.`**) within a variable name, such as in `my.mRNA`. A lot of functions in R have dots in their name for historical reasons and dots have special meaning in R so it is best to avoid them.

## Functions and useful tricks

Functions are "conserved scripts" that automate more complicated sets of commands including operations assignments, etc. Many functions are predefined, or can be made available by importing R packages (more on that later). A function usually gets one or more inputs called arguments. Functions often (but not always) return a value. Adding `?` in front of any function opens a help, description and usage of the function. A typical example function is `typeof`.

::: callout-tip
## Help with functions

What does the function type do?

(Hint: ?typeof)
:::

```{r, eval=FALSE}
?typeof

typeof(2)
```

## Vectors

A vector is the most common and basic data type in R. A vector is composed by a series of values. V ectors can be composed of integer/numeric, logical or character values. Using the **`c()`**function you can assign a series of values to a vector. The simplest way to create a sequence of numbers in R is by using the **`:`** operator.

Examples of defining vectors

```{r}
( first_vec_num <- c(1,2,5) )
#The simplest way to create a sequence of numbers in R is by using the : operator. 
( second_vec_num <- 1:30 )
( first_vec_character <- c("human", "mouse", "dog", "cat") )
( first_vec_logic <- c(TRUE, FALSE, TRUE) )
# create a vector containing different types
( mix_vec <-c(1, "sea", TRUE) )
```

### Different types and classes

#### Types

-   character

-   double (for double precision floating point numbers)

-   integer

::: callout-tip
## **Useful functions for determining types**

-   **`class()`**\
    Returns the class of an object (e.g., `"numeric"`, `"character"`, `"data.frame"`), giving a general idea of its structure.

-   **`typeof()`**\
    Provides the low-level internal storage type of an object (e.g., `"double"`, `"integer"`, `"list"`), which can be more specific than `class()`.

-   **`is.numeric()`**, **`is.character()`**, **`is.logical()`**, etc.\
    Return `TRUE` or `FALSE` depending on whether the object is of the specified type. These are useful for checking expected input types in functions.

-   **`as.numeric()`**, **`as.character()`**, **`as.logical()`**, etc.\
    Coerce (convert) an object to the specified type, if possible. These are helpful when transforming data types explicitly.

-   **`str()`**\
    Provides a compact, readable summary of the structure of an R object, including its type, dimensions, and content preview.
:::

What are the types of our objects?

```{r}
# double/numeric
typeof(first_vec_num)
# character
typeof(first_vec_character)
# logical
typeof(first_vec_logic)
# character
typeof(mix_vec)
```

::: callout-warning
## Converting types from one to another

Numerical can be converted to character,

```{r}
# To character
first_vec_num
as.character(first_vec_num)

```

while **not** all characters can be converted to numerical:

```{r}
# To numeric
first_vec_character
as.numeric(first_vec_character)
as.numeric(mix_vec)
```
:::

#### Calculation with vectors

R performs **element-wise operations** on vectors by default.

Example: `c(1, 2, 3) + c(10, 20, 30)` returns `11 22 33`

```{r}
c(1, 2, 3) + c(10, 20, 30)
```

::: callout-tip
## Vectorization

-   **Vectorization** means operations are applied to **all elements at once**, without loops.

It's efficient and concise.

-   Arithmetic operators (`+`, `-`, `*`, `/`, `^`) are **vectorized**.

Example: `c(2, 4, 6) * 2` returns `4 8 12`

-   Functions like `log()`, `sqrt()`, `exp()` are also **vectorized**.

Example: `sqrt(c(4, 9, 16))` returns `2 3 4`

-   When vectors are of **different lengths**, R **recycles** the shorter one (with a warning if not a multiple).

Example: `c(1, 2, 3) + 1` returns `2 3 4`
:::

##### Task

Let's go back and see what our variables are holding:

```{r}
# short vector
vec
# first vector
first_vec_num
#second vector
second_vec_num
```

**What will be the outcome of these operations? Explain it with comment in the following code chunk!**

```{r, eval = FALSE}
# vectorization: all elements in longer first vector were increased by 5
first_vec_num + vec 

#
```

```{r}
first_vec_num
```

```{r}
second_vec_num
```

```{r, eval = FALSE}
first_vec_num + second_vec_num
```

```{r, eval = FALSE}
#
first_vec_num * second_vec_num
```

### Subsetting vectors

Subsetting is a way to access specific elements of a vector using **indexing**.\
To extract one or more values, provide the corresponding indices inside **square brackets** (`[]`).

::: callout-tip
## Examples

-   Selecting the second element

```{r}
first_vec_num[2]
```

-   Negative subsetting- meaning not selecting the second element

```{r}
first_vec_num[-2]
```

-   Selecting first and third elements

```{r}
first_vec_num[c(1,3)]
```
:::

Moreover, selection can be done using other vectors, such as logical and numeric.

##### Task

**What happened when you used a logical vector for subsetting?**

```{r}
first_vec_num
first_vec_logic
```

```{r, eval=FALSE}
first_vec_num[first_vec_logic]
```

```{r}
first_vec_num
```

```{r, eval=FALSE}
first_vec_num[first_vec_num]
```

#### Adding and replacing elements

In R, you can modify vectors by **adding** new elements or **replacing** existing ones using indexing.

-   To **add elements**, simply use the `c()` function to concatenate new values to the existing vector.
-   To **replace elements**, use square bracket indexing and assign a new value to a specific position.

```{r}
# Add new values to the end of the vector
second_vec_num <- c(second_vec_num, 1, 30, 30, 30, 1, 1)
second_vec_num

# Replace the first element with a new value
second_vec_num[1] <- 10000
second_vec_num
```

#### Boolean Operators

Boolean operators in R (and other programming languages) are used to perform logical comparisons. They return `TRUE` or `FALSE` values based on whether a condition is met.

| Operator | Description              | Example    | Result  |
|----------|--------------------------|------------|---------|
| `>`      | Greater than             | `5 > 6`    | `FALSE` |
| `<`      | Less than                | `5 < 6`    | `TRUE`  |
| `==`     | Equals to                | `10 == 10` | `TRUE`  |
| `!=`     | Not equal to             | `10 != 10` | `FALSE` |
| `>=`     | Greater than or equal to | `5 >= 6`   | `FALSE` |
| `<=`     | Less than or equal to    | `6 <= 6`   | `TRUE`  |

::: callout-tip
## Examples

-   Basic inequality: Is 2 not equal to 2?

```{r}
2 != 2
```

-   Compare a numeric vector to a single number (element-wise comparison)

```{r}
first_vec_num == 2
```

-   Compare two vectors of unequal length

```{r}
first_vec_num == first_vec_character
```
:::

##### Task

In the second example, we got a warning message ***longer object length is not a multiple of shorter object length*** and an output **FALSE FALSE FALSE FALSE**. *What happened here?*

```{r}
# Write your answer here
```

### Boolean with logical operators

::: callout-tip
## There are three types of logical operators in R

AND operator **`&`**

OR operator **`|`**

NOT operator **`!`**
:::

Explain the examples below:

```{r}
first_vec_num
first_vec_num == 5

first_vec_num[first_vec_num == 5]

###
first_vec_num == 5
first_vec_num == 2
first_vec_num == 5 & first_vec_num == 2

##
first_vec_num == 5 | first_vec_num == 2
```

```{r}
####
first_vec_num[first_vec_num == 5 & first_vec_num == 2]
first_vec_num[first_vec_num == 5 | first_vec_num == 2]
```

### Examples of useful function

::: callout-tip
## **Basic descriptive statistics**

-   **`summary()`**\
    Provides a quick overview of an object. For numeric vectors or data frames, it returns the minimum, 1st quartile, median, mean, 3rd quartile, and maximum.

-   **`mean()`**\
    Calculates the arithmetic average of a numeric vector.

-   **`sum()`**\
    Adds all elements of a numeric vector together.

-   **`sd()`**\
    Computes the standard deviation, which measures the amount of variation or dispersion in the data.

-   **`table()`**\
    Creates a frequency table showing how often each value appears in a vector or factor.
:::

Example

```{r}
sum(c(10,10))
# Summary statistics
sum(second_vec_num)
summary(second_vec_num)
sd(second_vec_num)
# Count table
table( second_vec_num )

table( c("dog","dog","dog","cat","cat") )
```

::: callout-tip
## **Vector inspection**

-   **`length()`**\
    Returns the number of elements in a vector.

-   **`unique()`**\
    Extracts the distinct (non-duplicate) values from a vector.

-   **`anyNA()`**\
    Checks if there are any missing (`NA`) values in a vector and returns `TRUE` or `FALSE`.

-   **`is.na()`**\
    Returns a logical vector indicating which elements are `NA`.

-   **`sort()`**\
    Arranges the elements of a vector in ascending (default) or descending order.
:::

```{r}
# Number of elements in vector
length(second_vec_num)

# Order a vector
sort_second_vec <- sort(second_vec_num, 
                          decreasing = FALSE)
second_vec_num; sort_second_vec

# Count table
sort( second_vec_num )

# is there NA
is.na( second_vec_num ) 
anyNA( second_vec_num )
```

##### Task

**What is the mean of every second element in the vector `second_vec_num`?**

*Hard mode: Solve it in two different ways?*

```{r}
# Write the solution here

# first way
second_vec_num
```

```{r}
sum( second_vec_num[c(FALSE, TRUE)] )
second_vec_num[c(FALSE, FALSE,TRUE)] 

second_vec_num[length(second_vec_num)]
```

## Matrix

Matrix is a two dimensional data structure in R programming. It is similar to vector but additionally contains the dimension attribute.

::: callout-tip
## **Defining a matrix**

You define a matrix using the `matrix` function which takes data as vector, number of columns and/or rows to create a matrix. Argument `byrow` when FALSE is filling the matrix by columns

```{r}
# filling by rows
first_mat <- matrix(1:20, nrow=5)
first_mat
# filling by columns
second_mat <- matrix(1:20, nrow=5,
                        byrow=TRUE)
second_mat
```
:::

### Subsetting a matrix

Since matrices are two dimensional, you have to subset in **both** dimensions. **Subsetting is done by opening square brackets with supplied index for each dimension separated by a comma**. Blank subsetting is useful because you keep all rows or all columns.

```{r}
first_mat
first_mat[1, 3:4]
first_mat[1:2, 3:4]
```

### Replacing elements in a matrix

You can replace individual elements in a matrix using **indexing**. Here's an example:

```{r}
# Access the element in the first row, first column
first_mat[1,1]
# Replace that element with the character "a"
first_mat[1,1] <- "a"
# View the matrix
first_mat
```

::: callout-tip
## **Useful functions for matrices**

-   **`dim()`** -- Returns or sets the dimensions of a matrix (rows, columns).
-   **`nrow()`**, **`ncol()`** -- Get the number of rows or columns.
-   **`t()`** -- Transposes the matrix (swaps rows and columns).
-   **`rowSums()`**, **`colSums()`** -- Calculate row-wise or column-wise sums.
-   **`rowMeans()`**, **`colMeans()`** -- Calculate means for each row or column.
:::

##### Task

1.  Create a matrix called `second_matrix` using the vector `second_vec_num`.
2.  Fill the matrix **by columns**.
3.  Determine the **dimensions** of the matrix.
4.  Calculate the **sum of each row**.
5.  Calculate the **sum of each column**.

```{r}
# Write the solution here

second_matrix <- matrix(second_vec_num, 
                        nrow=5)
second_matrix

# dimensions
dim(second_matrix)
second_matrix
rowSums(second_matrix)

colSums(second_matrix)
```

## List

List is an object containing elements of various types -- like strings, numbers, matrices, vectors, functions and another list inside it. The list is created using the `list()` function in R.

```{r}
first_list <- list(first = c(7,5,24,88),
                   second = c("abc", 3))

first_list
```

### Accessing elements of a list

You can access elements of a list in several ways depending on whether you want:

-   the actual value inside the list, or

-   a sublist containing the element.

::: callout-tip
## Different subseting results in different object

1.  If elements have names, you can access them with `$`. Here we have names the first stored element as first "first" and therefore we can call it.

```{r}
first_list$first
```

2.  Using single brackets **`[]`**, we get a list

```{r}
first_list[1]
```

3.  Using double brackets **`[[]]`**, we get a stored element

```{r}
first_list[[1]]
```

4.  Using double brackets **`[[ ]]`**, we access the actual stored element, and then we can subset it further if it's a vector.

```{r}
first_list[[1]][2]
```
:::

### Replacing and adding elements

You can both replace and add values within elements of a list using double brackets **`[[ ]]`** and indexing.

```{r}
# Replace the first value in the first element of the list
first_list[[1]][1] <- "A"
```

Add a new value to a list element

```{r}
# Add a new (5th) value to the first element of the list
first_list[[1]][5] <- "x" 
```

View the result

```{r}
first_list
```

### List to vector

If you want to convert a list into a single atomic vector, you can use the `unlist()` function.\
This flattens all elements of the list into a **single vector**, as long as the contents are compatible (e.g., numeric and character can both be coerced into character).

```{r}
unlist(first_list)
first_list
```

##### Taks

The **names** created when unlisting a list are automatically generated by R and reflect the structure of the original list.

1.  First, save the result of `unlist` into a new vector called `unlist_first`.
2.  Then, use the function `unname`.\
    What does this do?

```{r}
# Write the solution here

unlist_first <- unlist(first_list)
#
unlist_first

names(unlist_first)
```

```{r}
# unname
unlist_first <- unname(unlist_first)
```
